package main.util;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class VulnerabilityManager {
    private static VulnerabilityManager instance;
    private List<String> brokenRules;
    private List<String> vulnerableMethods;

    private BufferedReader reader;

    private VulnerabilityManager() {
        this.brokenRules = new ArrayList<>();
        this.vulnerableMethods = new ArrayList<>();
    }

    public static VulnerabilityManager getInstance() {
        if (instance == null)
            instance = new VulnerabilityManager();

        return instance;
    }

    public void loadVulnerableMethods() throws IOException {
        try {
            reader = new BufferedReader(new FileReader("./report.txt"));

            String line = reader.readLine();
            StringBuilder sb = new StringBuilder();
            sb.append(line);
            while (line != null) {
                if (line.startsWith("==")) {

                    if (!sb.toString().equals(""))
                        brokenRules.add(sb.toString());

                    sb = new StringBuilder();

                } else {
                    sb.append(line);
                    sb.append(System.lineSeparator());
                }

                line = reader.readLine();
            }

            reader.close();
        } catch (IOException ioException) {
            ioException.printStackTrace();
        }

        Pattern patternMethod = Pattern.compile("(?=(\\<))((?!\\)\\>).)*\\)\\>");
        for (String brokenRule : brokenRules) {
            String method = "";

            Matcher m = patternMethod.matcher(brokenRule);
            while (m.find()) {
                method = m.group(0);
            }

            if (!method.equals(""))
                vulnerableMethods.add(method);
        }
    }

    public List<String> getVulnerableMethods() {
        
        return vulnerableMethods;
    }
}